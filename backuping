#!/usr/bin/env php
<?php

// Get first argv, name of script
array_shift( $argv );

require_once 'simple_html_dom_node.php';

if ( array_shift( $argv ) == '--site' ) {
  $dir = 'site';
  $site = array_shift( $argv );
  $file = pathinfo( $site );
  $html = file_get_html( $site );
  if (!file_exists($dir)) {
    mkdir($dir);
  }
  // Create file
  $contents = getFile($site);
  file_put_contents( $dir . '/' . $file['filename'] . '.' . $file['extension'], $contents );
  echo message('Getting site: ' . $site, 'WARNING');

  // Get Scripts
  echo message('Getting JavaScript resources', 'UNKNOWN');
  foreach ($html->find('script') as $script) {
    if ($script->src) {
      // Get script if not cdn
      if ( !preg_match('/^(http|https|ftp|\/\/)/', $script->src) ) {
        $scriptPath = pathinfo( $script->src );
        if ( !file_exists($script->src) ) {
          if (!file_exists($scriptPath['dirname']))
            @mkdir($dir . '/' . $scriptPath['dirname'], 0744, true);
          $sOuts = getFile( $file['dirname'] . '/' . $script->src);
          file_put_contents( $dir . '/' . $script->src, $sOuts );
          echo message("\tGet file: " . $script->src, 'SUCCESS');
        }
      }
    }
  }

  // Get all head link resources
  echo message('Getting CSS resources', 'UNKNOWN');
  foreach ($html->find('link') as $e) {
    $file_ = $e->href;
    if ( !preg_match('/^(http|https|ftp|\/\/)/', $file_) ) {
      $pathinfo = pathinfo($file_);
      if ( !file_exists( $dir . '/' . $file_ ) ) {
        if ( !file_exists( $dir . '/' . $pathinfo['dirname'] ) ) {
          @mkdir($dir . '/' . $pathinfo['dirname'], 0744, true);
        }
        $contents = getFile($file['dirname'] . '/' . $file_);
        file_put_contents( $dir . '/' . $file_, $contents );
        echo message("\tGet file: " . $file_, 'SUCCESS');
        // Get css resources
        if ( $pathinfo['extension'] == 'css' ) {
          foreach (explode(';', $contents) as $r) {
            if ( strstr($r, 'url(') ) {
              foreach (explode('url', $r) as $u) {
                preg_match_all('/\(.*\)/', $u, $l);
                foreach ($l as $i) {
                  if ( count($i) > 0 ) {
                    $item = substr( $i[0], 0, strpos( $i[0], ')' ) + 1 );
                    preg_match_all('/\((\"|\')?(.*)(\"|\')?\)/', $item, $match);
                    $resourceName = preg_replace( ['/\'/', '/\"/'], '', $match[2][0] );
                    $resourcePath = pathinfo($resourceName);
                    $url_ = $file['dirname'] . '/' . $pathinfo['dirname'] . '/' . $resourceName;
                    $file_out = $pathinfo['dirname'] . '/' . $resourceName;
                    $resourceDirectory = $pathinfo['dirname'] . '/' . $resourcePath['dirname'];
                    if ( !file_exists($dir . '/' . $file_out) ) {
                      // var_dump($dir . '/' . $file_out);
                      if ( !file_exists($resourceDirectory) )
                        @mkdir($dir . '/' . $resourceDirectory, 0744, true);

                      $rOuts = getFile($url_);
                      file_put_contents( $dir . '/' . $file_out, $rOuts );
                      echo message("\t\tGet file: " . $resourceName, 'PROMPT');

                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  // Get images
  echo message('Getting images', 'UNKNOWN');
  foreach ($html->find('img') as $image) {
    // Get script if not cdn
    if ( !preg_match('/^(http|https|ftp|\/\/)/', $image->src) ) {
      $imagePath = pathinfo( $image->src );
      if ( !file_exists($image->src) ) {
        if (!file_exists($imagePath['dirname']))
          @mkdir($dir . '/' . $imagePath['dirname'], 0744, true);
        $iOuts = getFile( $file['dirname'] . '/' . $image->src);
        file_put_contents( $dir . '/' . $image->src, $iOuts );
        echo message("\tGet file: " . $image->src, 'SUCCESS');
      }
    }
  }

}

function getFile($url) {
  $ch = curl_init();

  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

  $output = curl_exec($ch);

  curl_close($ch);
  return $output;
}

function message($message, $type) {
  $msgType = json_decode( json_encode( array(
    'SUCCESS'   => "\033[0;32m",
    'ERROR'     => "\033[1;31m",
    'WARNING'   => "\033[0;33m",
    'UNKNOWN'   => "\033[1;32m",
    'CONSOLE'   => "\033[0m",
    'PROMPT'    => "\033[1;34m",
    'OUT'       => "\033[0;37m"
  ) ) );
  return $msgType->$type . $message . $msgType->CONSOLE . "\n";
}
